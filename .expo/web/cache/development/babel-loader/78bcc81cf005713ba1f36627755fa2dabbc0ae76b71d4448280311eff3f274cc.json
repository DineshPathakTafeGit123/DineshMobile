{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { infoMessage } from \"../utils/flashMessage\";\nimport Settings from \"../constants/Settings\";\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { RoiDeletePerson, RoiGetPeople } from \"../utils/RoiApi\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { ButtonContainer } from \"../components/ButtonContainer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    people = _React$useState2[0],\n    setPeople = _React$useState2[1];\n  React.useEffect(refreshPersonList, []);\n  function refreshPersonList() {\n    console.log(\"refresh person list\");\n    RoiGetPeople().then(function (data) {\n      setPeople(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n  }\n  function showViewPerson(person) {\n    props.navigation.navigate('ViewPerson', {\n      id: person.id\n    });\n  }\n  function showEditPerson(person) {\n    props.navigation.navigate('EditPerson', {\n      id: person.id\n    });\n  }\n  function deletePerson(person) {\n    PopupOkCancel('Delete person?', `Are you sure you want to delete ${person.name}`, function () {\n      RoiDeletePerson(person.id).then(function (data) {\n        PopupOk('Person deleted', `${person.name} has been  deleted`);\n        refreshPersonList();\n      }).catch(function (error) {\n        PopupOk('API Error', 'Could not delete person');\n      });\n    }, function () {\n      console.log('Cancel - no delete for you!');\n    });\n  }\n  function displayConnectionMessage() {\n    console.log('displayConnectionMessage');\n    NetInfo.fetch().then(function (status) {\n      if (!status.isConnected) {\n        infoMessage('No internet connection', 'You will only see cached data until you \\nhave an active internet connection again');\n      }\n    });\n  }\n  function displayPeople() {\n    displayConnectionMessage();\n    if (!people) return;\n    return people.map(function (p) {\n      var _p$department$name, _p$department;\n      return _jsxs(View, {\n        style: Styles.dataContainerHorizontal,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            style: Styles.personListItemName,\n            children: p.name\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: (_p$department$name = (_p$department = p.department) == null ? void 0 : _p$department.name) != null ? _p$department$name : '---'\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: p.phone\n          })]\n        }), _jsxs(ButtonContainer, {\n          direction: \"column\",\n          children: [_jsx(MyButton, {\n            text: \"info\",\n            type: \"major\",\n            size: \"small\",\n            onPress: function onPress() {\n              showViewPerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Edit\",\n            type: \"default\",\n            size: \"small\",\n            onPress: function onPress() {\n              showEditPerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            onPress: function onPress() {\n              return deletePerson(p);\n            },\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText\n          })]\n        })]\n      }, p.id);\n    });\n  }\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+ Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"default\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","View","ScrollView","SafeAreaView","infoMessage","Settings","TextParagraph","TextH1","TextH2","Styles","MyButton","RoiDeletePerson","RoiGetPeople","PopupOk","PopupOkCancel","ButtonContainer","jsx","_jsx","jsxs","_jsxs","ViewPeopleScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","people","setPeople","useEffect","refreshPersonList","console","log","then","data","catch","error","showViewPerson","person","navigation","navigate","id","showEditPerson","deletePerson","name","displayConnectionMessage","NetInfo","fetch","status","isConnected","displayPeople","map","p","_p$department$name","_p$department","style","dataContainerHorizontal","children","personListItemDetails","personListItemName","personListItemText","department","phone","direction","text","type","size","onPress","buttonStyle","personListItemButton","textStyle","personListItemButtonText","safeAreaView","personButtonContainer","showAddPerson","container","contentContainerStyle","contentContainer","marginTop"],"sources":["C:/Users/dpath/MobAppProj/DineshMobile/screens/ViewPeopleScreen.js"],"sourcesContent":["import * as React from 'react';\r\nimport { View, ScrollView } from 'react-native';\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport { infoMessage } from '../utils/flashMessage';\r\n\r\n// Import helper code\r\nimport Settings from '../constants/Settings';\r\n\r\n// Import styling and components\r\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\r\nimport Styles from \"../styles/MainStyle\";\r\nimport { MyButton } from '../components/MyButton';\r\n\r\n// Update import\r\nimport { RoiDeletePerson, RoiGetPeople } from '../utils/RoiApi';\r\nimport { PopupOk, PopupOkCancel } from '../utils/Popup';\r\nimport { ButtonContainer } from '../components/ButtonContainer';\r\n\r\nexport default function ViewPeopleScreen(props) {\r\n\r\n  // State - data for this component\r\n\r\n  // Data array, default to empty array\r\n  const [people, setPeople] = React.useState([])\r\n\r\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\r\n  // \"effectful\" code is something that triggers a UI re-render\r\n  React.useEffect(refreshPersonList, [])\r\n\r\n  // Refresh the person list data - call the API\r\n  function refreshPersonList() {\r\n\r\n    console.log(\"refresh person list\")\r\n\r\n    // Get data from the API\r\n    RoiGetPeople()\r\n      // Success\r\n      .then(data => {\r\n        // Store results in state variable\r\n        setPeople(data)\r\n      })\r\n      // Error\r\n      .catch(error => {\r\n        PopupOk(\"API Error\", \"Could not get people from the server\")\r\n      })\r\n\r\n  }\r\n\r\n  // function showAddPerson() {\r\n  //   // Navigate to AddPerson and replace the current screen\r\n  //   props.navigation.replace('Root', { screen: 'AddPerson' });\r\n  // }\r\n  \r\n  function showViewPerson(person) {\r\n    // Navigate to ViewPerson and pass through the person's ID as a param\r\n    props.navigation.navigate('ViewPerson', { id: person.id });\r\n  }\r\n  \r\n  function showEditPerson(person) {\r\n    // Navigate to EditPerson and pass through the person's ID as a param\r\n    props.navigation.navigate('EditPerson', { id: person.id });\r\n  }\r\n  \r\n  /**\r\n   * Delete a person from the database\r\n   * @param {Person} person The person to delete.\r\n   */\r\n  function deletePerson(person) {\r\n    // Check if person should be deleted (confirm with user)\r\n    PopupOkCancel(\r\n      // Title and message\r\n      'Delete person?',\r\n      `Are you sure you want to delete ${person.name}`,\r\n  \r\n      // 0K - delete the person\r\n      () => {\r\n        // Delete the person using the API\r\n        RoiDeletePerson(person.id)\r\n          .then((data) => {\r\n            // Show confirmation that the person has been deleted\r\n            PopupOk('Person deleted', `${person.name} has been  deleted`);\r\n            // Refresh the person list\r\n            refreshPersonList();\r\n          })\r\n          .catch((error) => {\r\n            // Display error\r\n            PopupOk('API Error', 'Could not delete person');\r\n          });\r\n        // console.log('Ok.. deleting person');\r\n      },\r\n      // Cancel do nothing\r\n      () => {\r\n        console.log('Cancel - no delete for you!');\r\n      }\r\n    );\r\n  }\r\n  \r\n  // Display flash message banner if offline\r\n  function displayConnectionMessage() {\r\n    console.log('displayConnectionMessage');\r\n    // Get network connection status\r\n    NetInfo.fetch().then((status) => {\r\n      // Check if not connected to the Internet\r\n      if (!status.isConnected) {\r\n        // Display the flash message\r\n        infoMessage('No internet connection', 'You will only see cached data until you \\nhave an active internet connection again');\r\n      }\r\n    });\r\n  }\r\n\r\n  // Display all people data\r\n  function displayPeople() {\r\n    // Display flash message when there's a connection issue\r\n    displayConnectionMessage();\r\n\r\n    // Cancel if no people to display\r\n    if (!people) return;\r\n\r\n    // Loop through each item and turn into appropriate output and then return the result\r\n    return people.map((p) => {\r\n      // Create an output view for each item\r\n      return (\r\n        <View key={p.id} style={Styles.dataContainerHorizontal}>\r\n          <View style={Styles.personListItemDetails}>\r\n            <TextParagraph style={Styles.personListItemName}>{p.name}</TextParagraph>\r\n            <TextParagraph style={Styles.personListItemText}>{p.department?.name ?? '---'}</TextParagraph>\r\n            <TextParagraph style={Styles.personListItemText}>{p.phone}</TextParagraph>\r\n          </View>\r\n          <ButtonContainer direction=\"column\">\r\n            {/* <View style={Styles.personListItemButtons}> */}\r\n            <MyButton\r\n              text=\"info\"\r\n              type=\"major\" // default*|major|minor\r\n              size=\"small\" // small|medium*|large\r\n              onPress={() => {\r\n                showViewPerson(p);\r\n              }}\r\n              buttonStyle={Styles.personListItemButton}\r\n              textStyle={Styles.personListItemButtonText}\r\n            />\r\n            <MyButton\r\n              text=\"Edit\"\r\n              type=\"default\" // default*|major|minor\r\n              size=\"small\" // small|medium*|large\r\n              onPress={() => {\r\n                showEditPerson(p);\r\n              }}\r\n              buttonStyle={Styles.personListItemButton}\r\n              textStyle={Styles.personListItemButtonText}\r\n            />\r\n            <MyButton\r\n              text=\"Delete\"\r\n              type=\"minor\" // default*|major|minor\r\n              size=\"small\" // small|medium*|large\r\n              onPress={() => deletePerson(p)}\r\n              buttonStyle={Styles.personListItemButton}\r\n              textStyle={Styles.personListItemButtonText}\r\n            />\r\n            {/* </View> */}\r\n          </ButtonContainer>\r\n        </View>\r\n      );\r\n    });\r\n  }\r\n\r\n\r\n  // Main output of the screen component\r\n  return (\r\n    <SafeAreaView style={Styles.safeAreaView}>\r\n      \r\n      <View style={Styles.personButtonContainer}>\r\n        <MyButton \r\n          text=\"+ Add new person\"\r\n          type=\"major\"      // default*|major|minor\r\n          size=\"small\"      // small|medium*|large\r\n          onPress={showAddPerson}\r\n        />\r\n        <MyButton \r\n          text=\"Refresh\"\r\n          type=\"default\"    // default*|major|minor\r\n          size=\"small\"      // small|medium*|large\r\n          onPress={refreshPersonList}\r\n        />\r\n      </View>\r\n      \r\n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\r\n          \r\n        <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\r\n\r\n        <View>\r\n          {displayPeople()}\r\n        </View>\r\n\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}