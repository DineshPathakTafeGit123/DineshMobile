{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { infoMessage } from \"../utils/flashMessage\";\nimport NetInfo from '@react-native-community/netinfo';\nimport Settings from \"../constants/Settings\";\nimport { RoiDeletePerson, RoiGetPeople } from \"../utils/RoiApi\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { ButtonContainer } from \"../components/ButtonContainer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    people = _React$useState2[0],\n    setPeople = _React$useState2[1];\n  React.useEffect(function () {\n    refreshPersonList();\n  }, []);\n  function refreshPersonList() {\n    return _refreshPersonList.apply(this, arguments);\n  }\n  function _refreshPersonList() {\n    _refreshPersonList = _asyncToGenerator(function* () {\n      console.log(\"refresh person list\");\n      try {\n        var data = yield RoiGetPeople();\n        console.log(\"API Success\", data);\n        setPeople(data);\n      } catch (error) {\n        console.error(\"API Error\", error);\n        PopupOk(\"API Error\", \"Could not get people from the server\");\n      }\n    });\n    return _refreshPersonList.apply(this, arguments);\n  }\n  function showAddPerson() {\n    props.navigation.replace('Root', {\n      screen: 'AddPerson'\n    });\n  }\n  function showViewPerson(person) {\n    props.navigation.navigate('ViewPerson', {\n      id: person.id\n    });\n  }\n  function showEditPerson(person) {\n    props.navigation.navigate('EditPerson', {\n      id: person.id\n    });\n  }\n  function deletePerson(person) {\n    PopupOkCancel('Delete person?', `Are you sure you want to delete ${person.name}`, function () {\n      RoiDeletePerson(person.id).then(function () {\n        PopupOk('Person deleted', `${person.name} has been deleted`);\n        refreshPersonList();\n      }).catch(function () {\n        PopupOk('API Error', 'Could not delete person');\n      });\n    }, function () {\n      console.log('Cancel - no delete for you!');\n    });\n  }\n  React.useEffect(function () {\n    console.log('displayConnectionMessage');\n    NetInfo.fetch().then(function (status) {\n      if (!status.isConnected) {\n        infoMessage('No internet connection', 'You will only see cached data until you have an active internet connection again');\n      }\n    });\n  }, []);\n  function displayPeople() {\n    return people.map(function (p) {\n      var _p$department$name, _p$department;\n      return _jsxs(View, {\n        style: Styles.dataContainerHorizontal,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            children: p.name\n          }), _jsx(TextParagraph, {\n            children: (_p$department$name = (_p$department = p.department) == null ? void 0 : _p$department.name) != null ? _p$department$name : '---'\n          }), _jsx(TextParagraph, {\n            children: p.phone\n          })]\n        }), _jsxs(ButtonContainer, {\n          direction: \"column\",\n          children: [_jsx(MyButton, {\n            text: \"Info\",\n            type: \"major\",\n            size: \"small\",\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText,\n            onPress: function onPress() {\n              return showViewPerson(p);\n            }\n          }), _jsx(MyButton, {\n            text: \"Edit\",\n            type: \"default\",\n            size: \"small\",\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText,\n            onPress: function onPress() {\n              return showEditPerson(p);\n            }\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            buttonStyle: Styles.personListItemButton,\n            textStyle: Styles.personListItemButtonText,\n            onPress: function onPress() {\n              return deletePerson(p);\n            }\n          })]\n        })]\n      }, p.id);\n    });\n  }\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+ Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"default\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","View","ScrollView","SafeAreaView","infoMessage","NetInfo","Settings","RoiDeletePerson","RoiGetPeople","PopupOk","PopupOkCancel","TextParagraph","TextH1","TextH2","Styles","MyButton","ButtonContainer","jsx","_jsx","jsxs","_jsxs","ViewPeopleScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","people","setPeople","useEffect","refreshPersonList","_refreshPersonList","apply","arguments","_asyncToGenerator","console","log","data","error","showAddPerson","navigation","replace","screen","showViewPerson","person","navigate","id","showEditPerson","deletePerson","name","then","catch","fetch","status","isConnected","displayPeople","map","p","_p$department$name","_p$department","style","dataContainerHorizontal","children","personListItemDetails","department","phone","direction","text","type","size","buttonStyle","personListItemButton","textStyle","personListItemButtonText","onPress","safeAreaView","personButtonContainer","container","contentContainerStyle","contentContainer","marginTop"],"sources":["C:/Users/dpath/MobAppProj/DineshMobile/screens/ViewPeopleScreen.js"],"sourcesContent":["import * as React from 'react';\r\nimport { View, ScrollView } from 'react-native';\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport { infoMessage } from '../utils/flashMessage';\r\nimport NetInfo from '@react-native-community/netinfo';\r\n\r\n// Import helper code\r\nimport Settings from '../constants/Settings';\r\nimport { RoiDeletePerson, RoiGetPeople } from '../utils/RoiApi';\r\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\r\n\r\n// Import styling and components\r\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\r\nimport Styles from \"../styles/MainStyle\";\r\nimport { MyButton } from '../components/MyButton';\r\nimport { ButtonContainer } from '../components/ButtonContainer';\r\n\r\n\r\nexport default function ViewPeopleScreen(props) {\r\n\r\n  // State - data for this component\r\n\r\n  // Data array, default to an empty array\r\n  const [people, setPeople] = React.useState([])\r\n\r\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\r\n  // \"effectful\" code is something that triggers a UI re-render\r\n  React.useEffect(() => {\r\n    refreshPersonList();\r\n  }, [])\r\n\r\n  // Refresh the person list data - call the API\r\n  async function refreshPersonList() {\r\n    console.log(\"refresh person list\");\r\n\r\n    try {\r\n      // Get data from the API\r\n      const data = await RoiGetPeople();\r\n      console.log(\"API Success\", data);\r\n      // Store results in the state variable\r\n      setPeople(data);\r\n    } catch (error) {\r\n      console.error(\"API Error\", error);\r\n      PopupOk(\"API Error\", \"Could not get people from the server\");\r\n    }\r\n  }\r\n\r\n  function showAddPerson() {\r\n    // Navigate to AddPerson and replace the current screen\r\n    props.navigation.replace('Root', { screen: 'AddPerson' });\r\n  }\r\n\r\n  function showViewPerson(person) {\r\n    // Navigate to ViewPerson and pass through the person's ID as a param\r\n    props.navigation.navigate('ViewPerson', { id: person.id });\r\n  }\r\n\r\n  function showEditPerson(person) {\r\n    // Navigate to EditPerson and pass through the person's ID as a param\r\n    props.navigation.navigate('EditPerson', { id: person.id });\r\n  }\r\n\r\n  /**\r\n   * Delete a person from the database\r\n   * @param {Person} person The person to delete.\r\n   */\r\n  function deletePerson(person) {\r\n    // Check if the person should be deleted (confirm with the user)\r\n    PopupOkCancel(\r\n      // Title and message\r\n      'Delete person?',\r\n      `Are you sure you want to delete ${person.name}`,\r\n\r\n      // OK - delete the person\r\n      () => {\r\n        // Delete the person using the API\r\n        RoiDeletePerson(person.id)\r\n          .then(() => {\r\n            // Show confirmation that the person has been deleted\r\n            PopupOk('Person deleted', `${person.name} has been deleted`);\r\n            // Refresh the person list\r\n            refreshPersonList();\r\n          })\r\n          .catch(() => {\r\n            // Display error\r\n            PopupOk('API Error', 'Could not delete person');\r\n          });\r\n      },\r\n      // Cancel - do nothing\r\n      () => {\r\n        console.log('Cancel - no delete for you!');\r\n      }\r\n    );\r\n  }\r\n\r\n  // Display flash message banner if offline\r\n  React.useEffect(() => {\r\n    console.log('displayConnectionMessage');\r\n    // Get network connection status\r\n    NetInfo.fetch().then((status) => {\r\n      // Check if not connected to the Internet\r\n      if (!status.isConnected) {\r\n        // Display the flash message\r\n        infoMessage('No internet connection', 'You will only see cached data until you have an active internet connection again');\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // Display all people data\r\n  function displayPeople() {\r\n    \r\n    // Loop through each item and turn it into the appropriate output and then return the result\r\n    return people.map(p => {\r\n\r\n      // Create an output view for each item\r\n      return (\r\n        <View key={p.id} style={Styles.dataContainerHorizontal}>\r\n          <View style={Styles.personListItemDetails}>\r\n            <TextParagraph>{p.name}</TextParagraph>\r\n            <TextParagraph>{p.department?.name ?? '---'}</TextParagraph>\r\n            <TextParagraph>{p.phone}</TextParagraph>\r\n          </View>        \r\n          <ButtonContainer direction=\"column\"> \r\n              <MyButton\r\n              text=\"Info\"\r\n              type=\"major\"\r\n              size=\"small\"\r\n              buttonStyle={Styles.personListItemButton}\r\n              textStyle={Styles.personListItemButtonText}\r\n              onPress={() => showViewPerson(p)}\r\n              />\r\n              <MyButton\r\n              text=\"Edit\"\r\n              type=\"default\"\r\n              size=\"small\"\r\n              buttonStyle={Styles.personListItemButton}\r\n              textStyle={Styles.personListItemButtonText}\r\n              onPress={() => showEditPerson(p)}\r\n              />\r\n              <MyButton\r\n              text=\"Delete\"\r\n              type=\"minor\"\r\n              size=\"small\"\r\n              buttonStyle={Styles.personListItemButton}\r\n              textStyle={Styles.personListItemButtonText}\r\n              onPress={() => deletePerson(p)}\r\n              />\r\n          </ButtonContainer>\r\n        </View>\r\n      );\r\n    });\r\n  }\r\n\r\n  // Main output of the screen component\r\n  return (\r\n    <SafeAreaView style={Styles.safeAreaView}>\r\n      \r\n      <View style={Styles.personButtonContainer}>\r\n        <MyButton \r\n          text=\"+ Add new person\"\r\n          type=\"major\"      // default*|major|minor\r\n          size=\"small\"      // small|medium*|large\r\n          onPress={showAddPerson}\r\n        />\r\n        <MyButton \r\n          text=\"Refresh\"\r\n          type=\"default\"    // default*|major|minor\r\n          size=\"small\"      // small|medium*|large\r\n          onPress={refreshPersonList}\r\n        />\r\n      </View>\r\n      \r\n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\r\n          \r\n        <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\r\n\r\n        <View>\r\n          {displayPeople()}\r\n        </View>\r\n\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}